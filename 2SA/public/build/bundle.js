/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={460:function(t,e){var i,n;void 0===(n="function"==typeof(i=function t(){"use strict";var e="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:{},i=!e.document&&!!e.postMessage,n=i&&/blob:/i.test((e.location||{}).protocol),s={},r=0,a={parse:function(i,n){var o=(n=n||{}).dynamicTyping||!1;if(E(o)&&(n.dynamicTypingFunction=o,o={}),n.dynamicTyping=o,n.transform=!!E(n.transform)&&n.transform,n.worker&&a.WORKERS_SUPPORTED){var h=function(){if(!a.WORKERS_SUPPORTED)return!1;var i,n,o=(i=e.URL||e.webkitURL||null,n=t.toString(),a.BLOB_URL||(a.BLOB_URL=i.createObjectURL(new Blob(["(",n,")();"],{type:"text/javascript"})))),h=new e.Worker(o);return h.onmessage=g,h.id=r++,s[h.id]=h}();return h.userStep=n.step,h.userChunk=n.chunk,h.userComplete=n.complete,h.userError=n.error,n.step=E(n.step),n.chunk=E(n.chunk),n.complete=E(n.complete),n.error=E(n.error),delete n.worker,void h.postMessage({input:i,config:n,workerId:h.id})}var p=null;return a.NODE_STREAM_INPUT,"string"==typeof i?p=n.download?new c(n):new l(n):!0===i.readable&&E(i.read)&&E(i.on)?p=new u(n):(e.File&&i instanceof File||i instanceof Object)&&(p=new d(n)),p.stream(i)},unparse:function(t,e){var i=!1,n=!0,s=",",r="\r\n",o='"',h=o+o,c=!1,d=null,l=!1;!function(){if("object"==typeof e){if("string"!=typeof e.delimiter||a.BAD_DELIMITERS.filter((function(t){return-1!==e.delimiter.indexOf(t)})).length||(s=e.delimiter),("boolean"==typeof e.quotes||"function"==typeof e.quotes||Array.isArray(e.quotes))&&(i=e.quotes),"boolean"!=typeof e.skipEmptyLines&&"string"!=typeof e.skipEmptyLines||(c=e.skipEmptyLines),"string"==typeof e.newline&&(r=e.newline),"string"==typeof e.quoteChar&&(o=e.quoteChar),"boolean"==typeof e.header&&(n=e.header),Array.isArray(e.columns)){if(0===e.columns.length)throw new Error("Option columns is empty");d=e.columns}void 0!==e.escapeChar&&(h=e.escapeChar+o),"boolean"==typeof e.escapeFormulae&&(l=e.escapeFormulae)}}();var u=new RegExp(m(o),"g");if("string"==typeof t&&(t=JSON.parse(t)),Array.isArray(t)){if(!t.length||Array.isArray(t[0]))return p(null,t,c);if("object"==typeof t[0])return p(d||Object.keys(t[0]),t,c)}else if("object"==typeof t)return"string"==typeof t.data&&(t.data=JSON.parse(t.data)),Array.isArray(t.data)&&(t.fields||(t.fields=t.meta&&t.meta.fields),t.fields||(t.fields=Array.isArray(t.data[0])?t.fields:"object"==typeof t.data[0]?Object.keys(t.data[0]):[]),Array.isArray(t.data[0])||"object"==typeof t.data[0]||(t.data=[t.data])),p(t.fields||[],t.data||[],c);throw new Error("Unable to serialize unrecognized input");function p(t,e,i){var a="";"string"==typeof t&&(t=JSON.parse(t)),"string"==typeof e&&(e=JSON.parse(e));var o=Array.isArray(t)&&0<t.length,h=!Array.isArray(e[0]);if(o&&n){for(var c=0;c<t.length;c++)0<c&&(a+=s),a+=f(t[c],c);0<e.length&&(a+=r)}for(var d=0;d<e.length;d++){var l=o?t.length:e[d].length,u=!1,p=o?0===Object.keys(e[d]).length:0===e[d].length;if(i&&!o&&(u="greedy"===i?""===e[d].join("").trim():1===e[d].length&&0===e[d][0].length),"greedy"===i&&o){for(var m=[],g=0;g<l;g++){var _=h?t[g]:g;m.push(e[d][_])}u=""===m.join("").trim()}if(!u){for(var v=0;v<l;v++){0<v&&!p&&(a+=s);var w=o&&h?t[v]:v;a+=f(e[d][w],v)}d<e.length-1&&(!i||0<l&&!p)&&(a+=r)}}return a}function f(t,e){if(null==t)return"";if(t.constructor===Date)return JSON.stringify(t).slice(1,25);!0===l&&"string"==typeof t&&null!==t.match(/^[=+\-@].*$/)&&(t="'"+t);var n=t.toString().replace(u,h);return"boolean"==typeof i&&i||"function"==typeof i&&i(t,e)||Array.isArray(i)&&i[e]||function(t,e){for(var i=0;i<e.length;i++)if(-1<t.indexOf(e[i]))return!0;return!1}(n,a.BAD_DELIMITERS)||-1<n.indexOf(s)||" "===n.charAt(0)||" "===n.charAt(n.length-1)?o+n+o:n}}};if(a.RECORD_SEP=String.fromCharCode(30),a.UNIT_SEP=String.fromCharCode(31),a.BYTE_ORDER_MARK="\ufeff",a.BAD_DELIMITERS=["\r","\n",'"',a.BYTE_ORDER_MARK],a.WORKERS_SUPPORTED=!i&&!!e.Worker,a.NODE_STREAM_INPUT=1,a.LocalChunkSize=10485760,a.RemoteChunkSize=5242880,a.DefaultDelimiter=",",a.Parser=f,a.ParserHandle=p,a.NetworkStreamer=c,a.FileStreamer=d,a.StringStreamer=l,a.ReadableStreamStreamer=u,e.jQuery){var o=e.jQuery;o.fn.parse=function(t){var i=t.config||{},n=[];return this.each((function(t){if("INPUT"!==o(this).prop("tagName").toUpperCase()||"file"!==o(this).attr("type").toLowerCase()||!e.FileReader||!this.files||0===this.files.length)return!0;for(var s=0;s<this.files.length;s++)n.push({file:this.files[s],inputElem:this,instanceConfig:o.extend({},i)})})),s(),this;function s(){if(0!==n.length){var e,i,s,h=n[0];if(E(t.before)){var c=t.before(h.file,h.inputElem);if("object"==typeof c){if("abort"===c.action)return"AbortError",e=h.file,i=h.inputElem,s=c.reason,void(E(t.error)&&t.error({name:"AbortError"},e,i,s));if("skip"===c.action)return void r();"object"==typeof c.config&&(h.instanceConfig=o.extend(h.instanceConfig,c.config))}else if("skip"===c)return void r()}var d=h.instanceConfig.complete;h.instanceConfig.complete=function(t){E(d)&&d(t,h.file,h.inputElem),r()},a.parse(h.file,h.instanceConfig)}else E(t.complete)&&t.complete()}function r(){n.splice(0,1),s()}}}function h(t){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(t){var e=w(t);e.chunkSize=parseInt(e.chunkSize),t.step||t.chunk||(e.chunkSize=null),this._handle=new p(e),(this._handle.streamer=this)._config=e}.call(this,t),this.parseChunk=function(t,i){if(this.isFirstChunk&&E(this._config.beforeFirstChunk)){var s=this._config.beforeFirstChunk(t);void 0!==s&&(t=s)}this.isFirstChunk=!1,this._halted=!1;var r=this._partialLine+t;this._partialLine="";var o=this._handle.parse(r,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var h=o.meta.cursor;this._finished||(this._partialLine=r.substring(h-this._baseIndex),this._baseIndex=h),o&&o.data&&(this._rowCount+=o.data.length);var c=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(n)e.postMessage({results:o,workerId:a.WORKER_ID,finished:c});else if(E(this._config.chunk)&&!i){if(this._config.chunk(o,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);o=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(o.data),this._completeResults.errors=this._completeResults.errors.concat(o.errors),this._completeResults.meta=o.meta),this._completed||!c||!E(this._config.complete)||o&&o.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),c||o&&o.meta.paused||this._nextChunk(),o}this._halted=!0},this._sendError=function(t){E(this._config.error)?this._config.error(t):n&&this._config.error&&e.postMessage({workerId:a.WORKER_ID,error:t,finished:!1})}}function c(t){var e;(t=t||{}).chunkSize||(t.chunkSize=a.RemoteChunkSize),h.call(this,t),this._nextChunk=i?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(t){this._input=t,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(e=new XMLHttpRequest,this._config.withCredentials&&(e.withCredentials=this._config.withCredentials),i||(e.onload=y(this._chunkLoaded,this),e.onerror=y(this._chunkError,this)),e.open(this._config.downloadRequestBody?"POST":"GET",this._input,!i),this._config.downloadRequestHeaders){var t=this._config.downloadRequestHeaders;for(var n in t)e.setRequestHeader(n,t[n])}if(this._config.chunkSize){var s=this._start+this._config.chunkSize-1;e.setRequestHeader("Range","bytes="+this._start+"-"+s)}try{e.send(this._config.downloadRequestBody)}catch(t){this._chunkError(t.message)}i&&0===e.status&&this._chunkError()}},this._chunkLoaded=function(){4===e.readyState&&(e.status<200||400<=e.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:e.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(t){var e=t.getResponseHeader("Content-Range");return null===e?-1:parseInt(e.substring(e.lastIndexOf("/")+1))}(e),this.parseChunk(e.responseText)))},this._chunkError=function(t){var i=e.statusText||t;this._sendError(new Error(i))}}function d(t){var e,i;(t=t||{}).chunkSize||(t.chunkSize=a.LocalChunkSize),h.call(this,t);var n="undefined"!=typeof FileReader;this.stream=function(t){this._input=t,i=t.slice||t.webkitSlice||t.mozSlice,n?((e=new FileReader).onload=y(this._chunkLoaded,this),e.onerror=y(this._chunkError,this)):e=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var t=this._input;if(this._config.chunkSize){var s=Math.min(this._start+this._config.chunkSize,this._input.size);t=i.call(t,this._start,s)}var r=e.readAsText(t,this._config.encoding);n||this._chunkLoaded({target:{result:r}})},this._chunkLoaded=function(t){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(t.target.result)},this._chunkError=function(){this._sendError(e.error)}}function l(t){var e;h.call(this,t=t||{}),this.stream=function(t){return e=t,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var t,i=this._config.chunkSize;return i?(t=e.substring(0,i),e=e.substring(i)):(t=e,e=""),this._finished=!e,this.parseChunk(t)}}}function u(t){h.call(this,t=t||{});var e=[],i=!0,n=!1;this.pause=function(){h.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){h.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(t){this._input=t,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){n&&1===e.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),e.length?this.parseChunk(e.shift()):i=!0},this._streamData=y((function(t){try{e.push("string"==typeof t?t:t.toString(this._config.encoding)),i&&(i=!1,this._checkIsFinished(),this.parseChunk(e.shift()))}catch(t){this._streamError(t)}}),this),this._streamError=y((function(t){this._streamCleanUp(),this._sendError(t)}),this),this._streamEnd=y((function(){this._streamCleanUp(),n=!0,this._streamData("")}),this),this._streamCleanUp=y((function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)}),this)}function p(t){var e,i,n,s=Math.pow(2,53),r=-s,o=/^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/,h=/^(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))$/,c=this,d=0,l=0,u=!1,p=!1,g=[],_={data:[],errors:[],meta:{}};if(E(t.step)){var v=t.step;t.step=function(e){if(_=e,C())x();else{if(x(),0===_.data.length)return;d+=e.data.length,t.preview&&d>t.preview?i.abort():(_.data=_.data[0],v(_,c))}}}function y(e){return"greedy"===t.skipEmptyLines?""===e.join("").trim():1===e.length&&0===e[0].length}function x(){if(_&&n&&(k("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+a.DefaultDelimiter+"'"),n=!1),t.skipEmptyLines)for(var e=0;e<_.data.length;e++)y(_.data[e])&&_.data.splice(e--,1);return C()&&function(){if(_)if(Array.isArray(_.data[0])){for(var e=0;C()&&e<_.data.length;e++)_.data[e].forEach(i);_.data.splice(0,1)}else _.data.forEach(i);function i(e,i){E(t.transformHeader)&&(e=t.transformHeader(e,i)),g.push(e)}}(),function(){if(!_||!t.header&&!t.dynamicTyping&&!t.transform)return _;function e(e,i){var n,s=t.header?{}:[];for(n=0;n<e.length;n++){var r=n,a=e[n];t.header&&(r=n>=g.length?"__parsed_extra":g[n]),t.transform&&(a=t.transform(a,r)),a=b(r,a),"__parsed_extra"===r?(s[r]=s[r]||[],s[r].push(a)):s[r]=a}return t.header&&(n>g.length?k("FieldMismatch","TooManyFields","Too many fields: expected "+g.length+" fields but parsed "+n,l+i):n<g.length&&k("FieldMismatch","TooFewFields","Too few fields: expected "+g.length+" fields but parsed "+n,l+i)),s}var i=1;return!_.data.length||Array.isArray(_.data[0])?(_.data=_.data.map(e),i=_.data.length):_.data=e(_.data,0),t.header&&_.meta&&(_.meta.fields=g),l+=i,_}()}function C(){return t.header&&0===g.length}function b(e,i){return n=e,t.dynamicTypingFunction&&void 0===t.dynamicTyping[n]&&(t.dynamicTyping[n]=t.dynamicTypingFunction(n)),!0===(t.dynamicTyping[n]||t.dynamicTyping)?"true"===i||"TRUE"===i||"false"!==i&&"FALSE"!==i&&(function(t){if(o.test(t)){var e=parseFloat(t);if(r<e&&e<s)return!0}return!1}(i)?parseFloat(i):h.test(i)?new Date(i):""===i?null:i):i;var n}function k(t,e,i,n){var s={type:t,code:e,message:i};void 0!==n&&(s.row=n),_.errors.push(s)}this.parse=function(s,r,o){var h=t.quoteChar||'"';if(t.newline||(t.newline=function(t,e){t=t.substring(0,1048576);var i=new RegExp(m(e)+"([^]*?)"+m(e),"gm"),n=(t=t.replace(i,"")).split("\r"),s=t.split("\n"),r=1<s.length&&s[0].length<n[0].length;if(1===n.length||r)return"\n";for(var a=0,o=0;o<n.length;o++)"\n"===n[o][0]&&a++;return a>=n.length/2?"\r\n":"\r"}(s,h)),n=!1,t.delimiter)E(t.delimiter)&&(t.delimiter=t.delimiter(s),_.meta.delimiter=t.delimiter);else{var c=function(e,i,n,s,r){var o,h,c,d;r=r||[",","\t","|",";",a.RECORD_SEP,a.UNIT_SEP];for(var l=0;l<r.length;l++){var u=r[l],p=0,m=0,g=0;c=void 0;for(var _=new f({comments:s,delimiter:u,newline:i,preview:10}).parse(e),v=0;v<_.data.length;v++)if(n&&y(_.data[v]))g++;else{var w=_.data[v].length;m+=w,void 0!==c?0<w&&(p+=Math.abs(w-c),c=w):c=w}0<_.data.length&&(m/=_.data.length-g),(void 0===h||p<=h)&&(void 0===d||d<m)&&1.99<m&&(h=p,o=u,d=m)}return{successful:!!(t.delimiter=o),bestDelimiter:o}}(s,t.newline,t.skipEmptyLines,t.comments,t.delimitersToGuess);c.successful?t.delimiter=c.bestDelimiter:(n=!0,t.delimiter=a.DefaultDelimiter),_.meta.delimiter=t.delimiter}var d=w(t);return t.preview&&t.header&&d.preview++,e=s,i=new f(d),_=i.parse(e,r,o),x(),u?{meta:{paused:!0}}:_||{meta:{paused:!1}}},this.paused=function(){return u},this.pause=function(){u=!0,i.abort(),e=E(t.chunk)?"":e.substring(i.getCharIndex())},this.resume=function(){c.streamer._halted?(u=!1,c.streamer.parseChunk(e,!0)):setTimeout(c.resume,3)},this.aborted=function(){return p},this.abort=function(){p=!0,i.abort(),_.meta.aborted=!0,E(t.complete)&&t.complete(_),e=""}}function m(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function f(t){var e,i=(t=t||{}).delimiter,n=t.newline,s=t.comments,r=t.step,o=t.preview,h=t.fastMode,c=e=void 0===t.quoteChar?'"':t.quoteChar;if(void 0!==t.escapeChar&&(c=t.escapeChar),("string"!=typeof i||-1<a.BAD_DELIMITERS.indexOf(i))&&(i=","),s===i)throw new Error("Comment character same as delimiter");!0===s?s="#":("string"!=typeof s||-1<a.BAD_DELIMITERS.indexOf(s))&&(s=!1),"\n"!==n&&"\r"!==n&&"\r\n"!==n&&(n="\n");var d=0,l=!1;this.parse=function(t,a,u){if("string"!=typeof t)throw new Error("Input must be a string");var p=t.length,f=i.length,g=n.length,_=s.length,v=E(r),w=[],y=[],x=[],C=d=0;if(!t)return N();if(h||!1!==h&&-1===t.indexOf(e)){for(var b=t.split(n),k=0;k<b.length;k++){if(x=b[k],d+=x.length,k!==b.length-1)d+=n.length;else if(u)return N();if(!s||x.substring(0,_)!==s){if(v){if(w=[],D(x.split(i)),F(),l)return N()}else D(x.split(i));if(o&&o<=k)return w=w.slice(0,o),N(!0)}}return N()}for(var S=t.indexOf(i,d),I=t.indexOf(n,d),R=new RegExp(m(c)+m(e),"g"),T=t.indexOf(e,d);;)if(t[d]!==e)if(s&&0===x.length&&t.substring(d,d+_)===s){if(-1===I)return N();d=I+g,I=t.indexOf(n,d),S=t.indexOf(i,d)}else if(-1!==S&&(S<I||-1===I))x.push(t.substring(d,S)),d=S+f,S=t.indexOf(i,d);else{if(-1===I)break;if(x.push(t.substring(d,I)),B(I+g),v&&(F(),l))return N();if(o&&w.length>=o)return N(!0)}else for(T=d,d++;;){if(-1===(T=t.indexOf(e,T+1)))return u||y.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:w.length,index:d}),M();if(T===p-1)return M(t.substring(d,T).replace(R,e));if(e!==c||t[T+1]!==c){if(e===c||0===T||t[T-1]!==c){-1!==S&&S<T+1&&(S=t.indexOf(i,T+1)),-1!==I&&I<T+1&&(I=t.indexOf(n,T+1));var L=A(-1===I?S:Math.min(S,I));if(t[T+1+L]===i){x.push(t.substring(d,T).replace(R,e)),t[d=T+1+L+f]!==e&&(T=t.indexOf(e,d)),S=t.indexOf(i,d),I=t.indexOf(n,d);break}var O=A(I);if(t.substring(T+1+O,T+1+O+g)===n){if(x.push(t.substring(d,T).replace(R,e)),B(T+1+O+g),S=t.indexOf(i,d),T=t.indexOf(e,d),v&&(F(),l))return N();if(o&&w.length>=o)return N(!0);break}y.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:w.length,index:d}),T++}}else T++}return M();function D(t){w.push(t),C=d}function A(e){var i=0;if(-1!==e){var n=t.substring(T+1,e);n&&""===n.trim()&&(i=n.length)}return i}function M(e){return u||(void 0===e&&(e=t.substring(d)),x.push(e),d=p,D(x),v&&F()),N()}function B(e){d=e,D(x),x=[],I=t.indexOf(n,d)}function N(t){return{data:w,errors:y,meta:{delimiter:i,linebreak:n,aborted:l,truncated:!!t,cursor:C+(a||0)}}}function F(){r(N()),w=[],y=[]}},this.abort=function(){l=!0},this.getCharIndex=function(){return d}}function g(t){var e=t.data,i=s[e.workerId],n=!1;if(e.error)i.userError(e.error,e.file);else if(e.results&&e.results.data){var r={abort:function(){n=!0,_(e.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:v,resume:v};if(E(i.userStep)){for(var a=0;a<e.results.data.length&&(i.userStep({data:e.results.data[a],errors:e.results.errors,meta:e.results.meta},r),!n);a++);delete e.results}else E(i.userChunk)&&(i.userChunk(e.results,r,e.file),delete e.results)}e.finished&&!n&&_(e.workerId,e.results)}function _(t,e){var i=s[t];E(i.userComplete)&&i.userComplete(e),i.terminate(),delete s[t]}function v(){throw new Error("Not implemented.")}function w(t){if("object"!=typeof t||null===t)return t;var e=Array.isArray(t)?[]:{};for(var i in t)e[i]=w(t[i]);return e}function y(t,e){return function(){t.apply(e,arguments)}}function E(t){return"function"==typeof t}return n&&(e.onmessage=function(t){var i=t.data;if(void 0===a.WORKER_ID&&i&&(a.WORKER_ID=i.workerId),"string"==typeof i.input)e.postMessage({workerId:a.WORKER_ID,results:a.parse(i.input,i.config),finished:!0});else if(e.File&&i.input instanceof File||i.input instanceof Object){var n=a.parse(i.input,i.config);n&&e.postMessage({workerId:a.WORKER_ID,results:n,finished:!0})}}),(c.prototype=Object.create(h.prototype)).constructor=c,(d.prototype=Object.create(h.prototype)).constructor=d,(l.prototype=Object.create(l.prototype)).constructor=l,(u.prototype=Object.create(h.prototype)).constructor=u,a})?i.apply(e,[]):i)||(t.exports=n)}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var r=e[n]={exports:{}};return t[n].call(r.exports,r,r.exports,i),r.exports}i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),(()=>{"use strict";class t{constructor(t){this._content=document.createElement("div"),this._name=document.createElement("span"),this._racePicker=document.createElement("input");const e=document.createElement("div");this._racePicker.type="checkbox",this._racePicker.name=t,e.append(this._name,this._racePicker),this._content.classList.add("card-configuration"),this._content.append(e),this._racePicker.checked=!1}get content(){return this._content}get name(){return this._name}get racePicker(){return this._racePicker}}class e{constructor(){this._content=document.createElement("div"),this._name=document.createElement("span"),this._points=document.createElement("input");const t=document.createElement("div");this._points.type="number",t.append(this._name,this._points),this._content.classList.add("card-configuration"),this._content.append(t)}get content(){return this._content}get name(){return this._name}get points(){return this._points}}class n{constructor(t){this._content=document.createElement("div"),this._name=document.createElement("div"),this._rider=document.createElement("input");const e=document.createElement("div");this._rider.type="checkbox",e.append(this._name,this._rider),this._rider.name=t,this._content.classList.add("card-configuration"),this._rider.checked=!0,this._content.append(e)}get content(){return this._content}get name(){return this._name}get rider(){return this._rider}}class s{constructor(){this._content=document.createElement("span"),this._name=document.createElement("span"),this._allrider=document.createElement("input");const t=document.createElement("div");this._allrider.type="checkbox",t.append(this._name,this._allrider),this._content.classList.add("card-configuration"),this._allrider.checked=!0,this._content.append(t)}get content(){return this._content}get name(){return this._name}get allrider(){return this._allrider}}class r{constructor(t){this.dataset=t,t.registerUser(this)}}class a extends r{get data(){return this.dataset.data}get max(){return this._max}get min(){return this._min}get names(){return this._names}get confs(){return this._confs}get objects(){return this._objects}get times(){return this._times}update(){this._objects=new Map,this._confs=new Set,this._min=[this.data[0].point.x,this.data[0].point.y],this._max=[this.data[0].point.x,this.data[0].point.y],this._times=[this.data[0].time],this._names=new Set;for(let t=0;t<this.data.length;t++)this.data[t].point.x>this._max[0]&&(this._max[0]=this.data[t].point.x),this.data[t].point.y>this._max[1]&&(this._max[1]=this.data[t].point.y),this.data[t].point.x<this._min[0]&&(this._min[0]=this.data[t].point.x),this.data[t].point.y<this._min[1]&&(this._min[1]=this.data[t].point.y),this._confs.has(this.data[t].conf)||this._confs.add(this.data[t].conf),Math.abs(this.data[t].time-this._times[0])>1e-10&&this._times.push(this.data[t].time),this._objects.has(this.data[t].name+"@"+this.data[t].conf)||this._objects.set(this.data[t].name+"@"+this.data[t].conf,[]),this._objects.get(this.data[t].name+"@"+this.data[t].conf).push(this.data[t]);for(var t in this._confs)this._names.add(t);console.log(this._names),console.log(this.data)}}class o{constructor(){this._data=[],this._users=[],this._timeDate=!1}static createDataSet(){const t=new o;return t._info=new a(t),t.registerUser(t._info),t}get data(){return this._data}get users(){return this._users}get info(){return this._info}set data(t){this._data=JSON.parse(JSON.stringify(t)),this.changed()}get timeDate(){return this._timeDate}set timeDate(t){this._timeDate=t}registerUser(t){this._users.push(t)}notifyUsers(){console.log("nofityusers");for(let t=0;t<this.users.length;t++)this._users[t].update()}apply(t){console.log("DATASET: data processing by "+t.constructor.name),t.process(this.info),this.changed(),console.log("DATASET: done data processing by "+t.constructor.name)}changed(){this.data.sort(((t,e)=>t.time<e.time?-1:t.time===e.time?0:1)),this.notifyUsers()}}class h{constructor(t,e){this.radius=e,this.center=t}get path(){return this._path}render(t){if(!(t instanceof CanvasRenderingContext2D))throw new Error("Method not implemented.");this._path=new Path2D,this._path.arc(this.center.x,this.center.y,this.radius,0,2*Math.PI),this._path.closePath()}}class c extends class{constructor(t){this.shape=t}get path(){return this.shape.path}}{constructor(t,e){super(t),this.color=e}render(t){if(!(t instanceof CanvasRenderingContext2D))throw new Error("Method not implemented");this.shape.render(t),t.fillStyle=this.color,t.fill(this.path)}}class d extends r{constructor(t,e,i){super(t),this.confs=new Map,this.init=0,this.races=i,this.container=e}optionColorToString(t){return"rgba("+t.color.r+","+t.color.g+","+t.color.b+","+t.color.a+")"}componentToHex(t){var e=t.toString(16);return 1==e.length?"0"+e:e}style(t,e){const i=this.confs.get(t.conf);return new c(new h(e,i.radius),this.optionColorToString(i))}initialize(){let i,r=[];for(console.log("updateconfiguration"),this.dataset.data;this.container.firstChild;)this.container.removeChild(this.container.firstChild);var a=[];a.push("None");let o=new s;for(o.name.textContent="all",o.allrider.addEventListener("change",(()=>{if(o.allrider.checked)for(i=1;i<=20;i++)a[i].rider.checked=!0,r.push(""+i);else for(i=1;i<=20;i++){var t=r.indexOf(""+i);a[i].rider.checked=!1,-1!==t&&r.splice(t,1)}console.log(r),this.update_dataset(r)})),this.container.appendChild(o.content),i=1;i<=20;i++){let t;t=new n(i),t.rider.name=""+i,t.name.textContent=""+i,r.push(t.rider.name),t.rider.addEventListener("change",(()=>{if(console.log(t.rider.name),t.rider.checked)r.push(t.rider.name),console.log("added");else{var e=r.indexOf(t.rider.name);-1!==e&&r.splice(e,1)}console.log(r),this.update_dataset(r)})),console.log(),this.container.appendChild(t.content),a.push(t)}console.log(a),i=0,console.log(o.allrider);let h=new e;h.name.textContent="points",h.points.addEventListener("change",(()=>{this.update_dataset_points(h.points.value)})),this.container.appendChild(h.content);const c=this.dataset.info.confs;c.forEach((t=>{this.confs.has(t)||this.confs.set(t,{color:{r:Math.floor(255*Math.random()),g:Math.floor(255*Math.random()),b:Math.floor(255*Math.random()),a:1},radius:5})}));let d=[];console.log(this.confs),this.confs.forEach(((e,i)=>{if(console.log("keys"),console.log(i),c.has(i)){if(!d.includes(i.split(".")[0])){let e=new t(i.split(".")[0]);e.name.textContent=i.split(".")[0],e.racePicker.addEventListener("change",(()=>{if(console.log(e.racePicker),e.racePicker.checked)this.races.push(e.racePicker.name);else{var t=this.races.indexOf(e.racePicker.name);-1!==t&&this.races.splice(t,1)}console.log(this.races)})),this.container.appendChild(e.content),d.push(i.split(".")[0]),console.log(this.races)}}else this.confs.delete(i)}))}update(){0==this.init&&(this.init=1,this.initialize())}update_dataset_points(t){console.log(this.dataset.data);var e=new Set;console.log(this.dataset),this.dataset.info.confs.forEach(((t,i)=>{e.add(i.split(".")[0])})),console.log("makeconsfs"),console.log(e),e.forEach(((e,i)=>{var n=-1;console.log(i);var s=t;console.log(t),console.log(i),console.log(this.dataset.data.length-1);for(var r=this.dataset.data.length-1;r>=0;r--){var a=this.dataset.data[r].time;console.log(this.dataset.data[r].conf.split(".")[0]),i==this.dataset.data[r].conf.split(".")[0]&&s>0?(this.dataset.data[r].visible_points=!0,console.log(r)):i==this.dataset.data[r].conf.split(".")[0]&&(this.dataset.data[r].visible_points=!1),a!=n&&i==this.dataset.data[r].conf.split(".")[0]&&(n=a,s-=1)}})),this.dataset.data[1].time,this.dataset.data[0].time,console.log(this.dataset.data),this.dataset.notifyUsers()}update_dataset(t){for(var e of this.dataset.data){var i=t.indexOf(e.name);e.visible=-1!=i}console.log(this.dataset),this.dataset.notifyUsers()}}var l;!function(t){t[t.hidden=0]="hidden",t[t.shown=1]="shown"}(l||(l={}));class u{constructor(){this._content=document.createElement("ul"),this._content.classList.add("dropdown")}get content(){return this._content}add(...t){for(let e=0;e<t.length;e++)this._content.appendChild(t[e].content)}}class p{constructor(t){this.items=[],this.state=l.hidden,this._content=document.createElement("li"),this.name=t;const e=document.createElement("button");e.classList.add("dropdown-item"),e.textContent=this.name,window.addEventListener("click",(t=>this.updateState(t))),this._content.appendChild(e)}get content(){return this._content}add(...t){for(let e=0;e<t.length;e++)this.items.push(t[e])}updateState(t){switch(this.state){case l.hidden:if(t.target==this._content.firstChild){this.menu=document.createElement("ul"),this.menu.classList.add("dropdown-menu");for(let t=0;t<this.items.length;t++)this.menu.appendChild(this.items[t].content);this._content.appendChild(this.menu),this.state=l.shown}break;case l.shown:this._content.removeChild(this.menu),this.state=l.hidden}}}class m{constructor(t){this._content=document.createElement("li"),this.items=[],this.state=l.hidden,this.name=t,window.addEventListener("click",(t=>this.updateState(t))),this._content.addEventListener("mouseover",(t=>this.updateState(t))),this._content.addEventListener("mouseleave",(t=>this.updateState(t)));const e=document.createElement("button");e.textContent=t,e.classList.add("dropdown-item"),this._content.appendChild(e)}get content(){return this._content}add(...t){for(let e=0;e<t.length;e++)this.items.push(t[e])}updateState(t){switch(this.state){case l.hidden:if("mouseover"==t.type){this.menu=document.createElement("ul"),this.menu.classList.add("dropdown-menu","dropdown-submenu");for(let t=0;t<this.items.length;t++)this.menu.appendChild(this.items[t].content);this._content.appendChild(this.menu),this.state=l.shown}break;case l.shown:"mouseleave"!=t.type&&"click"!=t.type||(this._content.removeChild(this.menu),this.state=l.hidden)}}}class f{constructor(t,e){this._content=document.createElement("li");const i=document.createElement("button");i.classList.add("dropdown-item"),null==e?i.classList.add("dropdown-disabled"):i.addEventListener("click",e),i.textContent=t,this._content.appendChild(i)}get content(){return this._content}}class g{constructor(t){this.fps=0,this.fps=t}process(t){const e=1/this.fps,i=[];t.objects.forEach((t=>{const n=Math.ceil(t[0].time/e)*e;let s=1;if(null==t[s])throw new Error("Cannot interpolate object with only one datapoint");var r=0;for(let a=n;a<=t[t.length-1].time;a+=e){for(console.log(t[s]);a>t[s].time;)s++;i.push({point:{x:(t[s].point.x-t[s-1].point.x)/(t[s].time-t[s-1].time)*(a-t[s].time)+t[s].point.x,y:(t[s].point.y-t[s-1].point.y)/(t[s].time-t[s-1].time)*(a-t[s].time)+t[s].point.y},time:a,name:t[0].name,visible:t[0].visible,visible_points:t[r].visible_points,conf:t[0].conf}),r+=1}})),t.data.splice(0);for(let e=0;e<i.length;e++)t.data.push(i[e]);console.log(t.data)}}var _,v=i(460);class w{getTimeType(){return this.TimeType}load(t,e){this.callback=e,(0,v.parse)(t,{skipEmptyLines:!0,complete:e=>this.process(e,t)})}process(t,e){const i=t.data;if(this.headerFieldsPresent(t.data[0])){this.TimeType=!!isNaN(i[1][this.index.time]);const n=this.parseToDataPoint2D(t.data,e.name.slice(0,-4));return this.callback(n),void(this.dataarray=n)}}load2(t,e,i){this.callback=i,console.log(e);var n=e.length,s=0;for(this.tasks=e.length,this.dataarray=[];s<n;s++){const i=e[s];(0,v.parse)(i,{skipEmptyLines:!0,complete:e=>this.process2(e,t,i)})}}process2(t,e,i){const n=t.data;if(console.log("parsingdata"),this.headerFieldsPresent(t.data[0])){this.TimeType=!!isNaN(n[1][this.index.time]),console.log(i.name);var s=this.parseToDataPoint2D(t.data,i.name.slice(0,-4)+".");--this.tasks,0!=this.dataarray.length?(this.dataarray=this.dataarray.concat(s),console.log("concatenate"),s=this.dataarray):this.dataarray=s,this.dataprev=this.dataarray,0==this.tasks&&this.callback(s)}alert("File input not valid.")}headerFieldsPresent(t){this.index={x:null,y:null,time:null,conf:null,name:null};for(let e=0;e<t.length;e++)for(let i in this.index){let n=-1!=t[e].toLowerCase().search(i);if("name"==i&&(n||(n=-1!=t[e].toLowerCase().search("id"))),n){this.index[i]=e;break}}return null!=this.index.x&&null!=this.index.y&&null!=this.index.time&&null!=this.index.name}parseToDataPoint2D(t,e){const i=isNaN(t[1][this.index.time])?t=>new Date(t[this.index.time]).getTime()/1e3:t=>Number(t[this.index.time]),n=null==t[1][this.index.conf]?t=>t[this.index.name]:t=>t[this.index.conf];var s=[];for(let r=1;r<t.length;r++)s.push({point:{x:Number(t[r][this.index.x]),y:Number(t[r][this.index.y])},time:i(t[r]),name:t[r][this.index.name],visible:!0,visible_points:!1,conf:e+n(t[r])});return s}}!function(t){t[t.playing=0]="playing",t[t.paused=1]="paused"}(_||(_={}));class y{constructor(){this._content=document.createElement("div"),this.state=_.paused,this._timeSlider=document.createElement("input"),this._timeSlider.type="range",this._timeSlider.min="0",this._timeSlider.max="0",this._playButton=document.createElement("button"),this._playButton.appendChild(document.createElement("img")).src=y.PLAY_ICON_SRC,this._playButton.addEventListener("click",(()=>{const t=this._playButton.firstChild;this.state==_.paused?(t.src=y.PAUSE_ICON_SRC,this.state=_.playing):(t.src=y.PLAY_ICON_SRC,this.state=_.paused)})),this._fasterButton=document.createElement("button"),this._fasterButton.appendChild(document.createElement("img")).src=y.FASTER_ICON_SRC,this._slowerButton=document.createElement("button"),this._slowerButton.appendChild(document.createElement("img")).src=y.SLOWER_ICON_SRC,this._speedText=document.createElement("span"),this._timestampText=document.createElement("span"),this._timeRemainingText=document.createElement("span"),this._timeRemainingText.textContent="00:00:00",this._timeCurrentText=document.createElement("span"),this._timeCurrentText.textContent="00:00:00";const t=document.createElement("div");t.classList.add("animation-controls-slider"),t.append(this._timeCurrentText,this._timeSlider,this._timeRemainingText);const e=document.createElement("div");e.classList.add("animation-controls-buttons"),e.append(this._slowerButton,this._playButton,this._fasterButton);const i=document.createElement("div");i.append(document.createTextNode("timestamp: "),this._timestampText);const n=document.createElement("div");n.append(document.createTextNode("speed: "),this._speedText),this._content.append(t,e,i,n)}get content(){return this._content}get timeSlider(){return this._timeSlider}get playButton(){return this._playButton}get fasterButton(){return this._fasterButton}get slowerButton(){return this._slowerButton}get speedText(){return this._speedText}get timeRemainingText(){return this._timeRemainingText}get timeCurrentText(){return this._timeCurrentText}get timestampText(){return this._timestampText}}y.PLAY_ICON_SRC="./icons/play_arrow-24px.svg",y.FASTER_ICON_SRC="./icons/fast_forward-black-18dp.svg",y.SLOWER_ICON_SRC="./icons/fast_rewind-black-18dp.svg",y.PAUSE_ICON_SRC="./icons/pause-black-18dp.svg";class E{process(t){const e=t.data;var i=new Array;t.confs.forEach(((t,e)=>{-1==i.indexOf(e.split(".")[0])&&i.push(e.split(".")[0])}));var n=new Array(i.length),s=new Array(i.length);console.log("data"),console.log(i);for(var r=0;r<n.length;r++)n[r]=null,s[r]=null;for(var a of e)(n[c=i.indexOf(a.conf.split(".")[0])]<a.point.y||null==n[c])&&(n[c]=a.point.y),(s[c]<a.time||null==n[c])&&(s[c]=a.time);console.log(n),console.log(s);var o=Math.max.apply(null,n),h=Math.max.apply(null,s);for(r=0;r<n.length;r++)n[r]-=o,s[r]-=h,n[r]*=-1,s[r]*=-1;for(var a of(console.log(n),console.log(s),e)){var c=i.indexOf(a.conf.split(".")[0]);a.point.y=Number(a.point.y)+Number(n[c]),a.time=Number(a.time)+Number(s[c])}for([].concat(e),console.log(e),n=new Array(i.length),s=new Array(i.length),console.log("data"),console.log(i),r=0;r<n.length;r++)n[r]=null,s[r]=null;for(var a of e)(n[c=i.indexOf(a.conf.split(".")[0])]<a.point.y||null==n[c])&&(n[c]=a.point.y),(s[c]<a.time||null==n[c])&&(s[c]=a.time);console.log(n),console.log(s)}}class x{exportToCsv(t,e){var i="";i+="configuration,name,time,X-coordinate,Y-coordinate\n";for(let t=0;t<e.length;t++)i+=e[t].conf+","+e[t].name+","+e[t].time.toString()+","+e[t].point.x.toString()+","+e[t].point.y.toString()+"\n";var n=new Blob([i],{type:"text/csv;charset=utf-8;"}),s=document.createElement("a");if(void 0!==s.download){var r=URL.createObjectURL(n);s.setAttribute("href",r),s.setAttribute("download",t),s.style.visibility="hidden",document.body.appendChild(s),s.click(),document.body.removeChild(s)}}}class C extends class{constructor(t){this.dx=0,this.dy=0,this.picture=t,this.dw=t.width,this.dh=t.height}render(t){if(!(t instanceof CanvasRenderingContext2D))throw new Error("Method not implemented.");t.drawImage(this.picture,this.dx,this.dy,this.dw,this.dh)}}{constructor(t,e,i,n,s,r){super(t),this.fitter=e,this.dx=i,this.dy=n,this.dw=s-i,this.dh=r-n}render(t){if(!(t instanceof CanvasRenderingContext2D))throw new Error("Method not implemented.");{let e,i;try{e=this.fitter.fit({x:this.dx,y:this.dy}),i=this.fitter.fit({x:this.dx+this.dw,y:this.dy+this.dh})}catch(t){e={x:0,y:0},i={x:this.dw,y:this.dh}}t.drawImage(this.picture,e.x,e.y,i.x-e.x,i.y-e.y)}}}class b{constructor(){this._content=document.createElement("div"),this._fileInput=document.createElement("input"),this._upperLeftInputX=document.createElement("input"),this._upperLeftInputY=document.createElement("input"),this._lowerRightInputX=document.createElement("input"),this._lowerRightInputY=document.createElement("input");const t=document.createElement("span");t.textContent="Select a picture: ",this._fileInput.type="file",this._fileInput.accept="image/*";const e=document.createElement("button");e.textContent="Search",e.addEventListener("click",(()=>this._fileInput.click()));const i=document.createElement("p");i.textContent="Give the x- and y- coördinates of where the upper left corner of the picture should be:";const n=document.createElement("form");this._upperLeftInputX.type="number",this._upperLeftInputX.value="0",this._upperLeftInputY.type="number",this._upperLeftInputY.value="0",n.append(this._upperLeftInputX,this._upperLeftInputY);const s=document.createElement("p");s.textContent="Give the x- and y- coördinates of where the lower right corner of the picture should be:";const r=document.createElement("form");this._lowerRightInputX.type="number",this._lowerRightInputX.value="0",this._lowerRightInputY.type="number",this._lowerRightInputY.value="0",r.append(this._lowerRightInputX,this._lowerRightInputY),this._content.append(t,e,i,n,s,r)}get content(){return this._content}get fileInput(){return this._fileInput}get upperLeftInputX(){return this._upperLeftInputX}get upperLeftInputY(){return this._upperLeftInputY}get lowerRightInputX(){return this._lowerRightInputX}get lowerRightInputY(){return this._lowerRightInputY}}const k=i.p+"97058af0e57f98c78154eb897b7d3399.jpg";class S{constructor(t,e){this.renderables=[],this._canvas=t,this._context=this._canvas.getContext(e)}get canvas(){return this._canvas}enqueue(t,e){void 0===e&&(e=0),this.renderables.push([t,e]),this.renderables.sort(((t,e)=>t[1]<e[1]?-1:t[1]==e[1]?0:1))}dequeue(t){let e=0;for(;e<this.renderables.length&&this.renderables[e][0]!==t;e++);if(e==this.renderables.length)throw new Error("Renderable not in render queue");this.renderables.splice(e,1)}render(){this.clearCanvas();for(let t=0;t<this.renderables.length;t++)try{this.renderables[t][0].render(this._context)}catch(t){console.log(t)}}set context(t){this._context=this.canvas.getContext(t)}clearCanvas(){if(!(this._context instanceof CanvasRenderingContext2D))throw new Error("Method not implemented.");this._context.clearRect(0,0,this.canvas.width,this.canvas.height)}}class I extends r{constructor(t,e){super(t),this.canvas=e.canvas,this._interaction=new R(e)}get resolution(){return[this.canvas.width,this.canvas.height]}get interaction(){return this._interaction}update(){if(this.dataset.data.length<1)return;const t=[this.canvas.width,this.canvas.height],e=this.dataset.info.min,i=this.dataset.info.max;let n=t[0]/(i[0]-e[0]),s=t[1]/(i[1]-e[1]);this.scaling=n<s?n:s}fit(t){if(this.dataset.data.length<1)throw new Error("Dataset is empty.");const e=[this.canvas.width,this.canvas.height],i=this.dataset.info.min,n=[this._interaction.centerX,this._interaction.centerY];return{x:this._interaction.zoom*(this.scaling*(t.x-i[0])+this._interaction.offsetX-n[0])+n[0],y:this._interaction.zoom*(-this.scaling*(t.y-i[1])+e[1]+this._interaction.offsetY-n[1])+n[1]}}inverseFit(t){if(this.dataset.data.length<1)throw new Error("Dataset is empty.");const e=[this.canvas.width,this.canvas.height],i=this.dataset.info.min,n=[this._interaction.centerX,this._interaction.centerY];return{x:((t.x-n[0])/this._interaction.zoom-this._interaction.offsetX+n[0])/this.scaling+i[0],y:-((t.y-n[1])/this._interaction.zoom-e[1]-this._interaction.offsetY+n[1])/this.scaling+i[1]}}}class R{constructor(t){this._active=!1,this._offsetX=0,this._offsetY=0,this._zoom=1,this._centerX=0,this._centerY=0,this.startHandler=()=>{this.canvas.addEventListener("mouseup",this.cancelHandler),this.canvas.addEventListener("mouseleave",this.cancelHandler),this.canvas.addEventListener("mousemove",this.panHandler),this.canvas.removeEventListener("mousedown",this.startHandler)},this.cancelHandler=()=>{this.canvas.removeEventListener("mouseup",this.cancelHandler),this.canvas.removeEventListener("mouseleave",this.cancelHandler),this.canvas.removeEventListener("mousemove",this.panHandler),this.canvas.addEventListener("mousedown",this.startHandler)},this.panHandler=t=>{this._offsetX+=t.movementX,this._offsetY+=t.movementY,this.renderer.render()},this.zoomHandler=t=>{this._centerX=t.offsetX,this._centerY=t.offsetY,this._zoom=Math.min(Math.max(.125,this._zoom-.001*t.deltaY),4),this.renderer.render()},this.renderer=t,this.canvas=t.canvas}get offsetX(){return this._offsetX}get offsetY(){return this._offsetY}get zoom(){return this._zoom}get centerX(){return this._centerX}get centerY(){return this._centerY}set active(t){t!=this._active&&(this._active=t,this._active?(this.canvas.addEventListener("mousedown",this.startHandler),this.canvas.addEventListener("wheel",this.zoomHandler)):(this.canvas.removeEventListener("mousedown",this.startHandler),this.canvas.removeEventListener("wheel",this.zoomHandler)))}reset(){this._offsetX=0,this._offsetY=0,this._zoom=1,this._centerX=0,this._centerY=0}}class T extends r{constructor(t,e,i,n,s){super(t),this.frames=[],this.races=s,this.fitter=e,this._styler=i,this.canvasname=n,this.races=s,this.title=document.getElementById(this.canvasname)}set frameNo(t){this._frameNo=t}get noFrames(){return this.frames.length}set styler(t){this._styler=t}time(t){return this.frames.length>0?this.frames[t][0].time:0}render(t){if(!(t instanceof CanvasRenderingContext2D))throw new Error("Method not implemented");if(this.frames.length>0)for(let e=0;e<this.frames[this._frameNo].length;e++){const i=this.frames[this._frameNo][e];this._styler.style(i,this.fitter.fit(i.point)).render(t)}}update(){console.log("ANIMATOR: Making frames...");let t=performance.now(),e=this.dataset.data,i=new Set;for(var n in console.log(this.dataset.info.confs),this.dataset.info.confs)console.log(n.split(".")[0]),i.add(n.split(".")[0]);console.log(i);var s=this.races[this.canvasname].split("_");console.log(s);var r=s.pop();this.title.textContent=r,this.frames=[[e[0]]],console.log("canvasname"),console.log(this.races),console.log(this.races[this.canvasname]);for(let t=1,i=0;t<e.length;t++)1==e[t].visible&&e[t].conf.split(".")[0]==this.races[this.canvasname]&&1==e[t].visible_points&&(Math.abs(e[t].time-this.frames[i][0].time)>1e-6&&(i++,this.frames.push([])),this.frames[i].push(e[t]));console.log(this.frames);let a=performance.now();console.log("ANIMATOR: Done making frames in "+(a-t)+" miliseconds.")}}class L{constructor(t){this.scale=50,this.fitter=t}setScale(t){this.scale=t}getScale(){return this.scale}renderGrid(t){if(!(t instanceof CanvasRenderingContext2D))throw new Error("Method not implemented.");{const e=this.fitter.resolution;let i;try{i=this.fitter.fit({x:0,y:0})}catch(t){i={x:0,y:e[1]}}const n=new Path2D,s=Math.abs(i.x%(this.scale/2));for(let i=0;s+this.scale/2*i<e[0];i++)n.moveTo(s+i*this.scale/2,0),n.lineTo(s+i*this.scale/2,t.canvas.height);const r=Math.abs(i.y%(this.scale/2));for(let i=0;r+this.scale/2*i<e[1];i++)n.moveTo(0,r+i*this.scale/2),n.lineTo(t.canvas.width,r+i*this.scale/2);t.strokeStyle="#efefef",t.stroke(n)}}renderAxes(t){}render(t){this.renderGrid(t),this.renderAxes(t)}}var O;!function(t){t[t.paused=0]="paused",t[t.playing=1]="playing"}(O||(O={}));class D extends r{constructor(t,e,i,n){super(t),this._fps=1,this.speed=1,this.state=O.paused,this.view=e,this.animation=i,this.renderer=n,this.renderer.enqueue(i),this.view.timeSlider.addEventListener("input",(()=>this.showCurrentFrame())),this.view.playButton.addEventListener("click",(()=>this.updateState())),this.view.fasterButton.addEventListener("click",(()=>this.changeSpeed(1))),this.view.slowerButton.addEventListener("click",(()=>this.changeSpeed(-1))),this.view.speedText.textContent="x"+this._fps.toString(),this.view.timeSlider.value="0"}showCurrentFrame(){this.animation.frameNo=this.view.timeSlider.valueAsNumber,this.updateTimestamps(this.view.timeSlider.valueAsNumber),this.renderer.render()}update(){this.view.timeSlider.max=""+(this.animation.noFrames-1),this.slider=0}set slider(t){this.view.timeSlider.value=t.toString(),this.showCurrentFrame()}updateTimestamps(t){const e=this.animation.time(t)-this.animation.time(0);this.view.timeCurrentText.textContent=Math.floor(e/3600)+new Date(1e3*e).toISOString().substr(13,10);const i=this.animation.time(this.animation.noFrames-1)-this.animation.time(t);this.view.timeRemainingText.textContent=Math.floor(i/3600)+new Date(1e3*i).toISOString().substr(13,10),this.view.timestampText.textContent=this.dataset.timeDate?new Date(1e3*this.animation.time(t)).toUTCString():this.animation.time(t).toString()}updateState(){switch(this.state){case O.paused:this.state=O.playing,this.handle=window.setInterval((()=>this.slider=(this.view.timeSlider.valueAsNumber+1)%(Number(this.view.timeSlider.max)+1)),1e3/this._fps);break;case O.playing:this.state=O.paused,clearInterval(this.handle)}}changeSpeed(t){this._fps*=Math.pow(2,t),this.speed*=Math.pow(2,t),this.view.speedText.textContent="x"+this.speed,this.updateState(),this.updateState()}set fps(t){if(!(t>0))throw Error("Not a valid fps");this._fps=t,this.speed=1,this.view.speedText.textContent="x"+this.speed,this.updateState(),this.updateState()}}class A{constructor(){const t=document.createElement("canvas");window.addEventListener("resize",(()=>{null!=t.parentElement&&(t.title="eerste",t.width=500,t.height=500)})),this._content=t}get content(){return this._content}}class M{constructor(t,e,i,n,s,r){this.options=document.getElementById("container-options"),this.configurations=document.getElementById("container-configurations"),this.controls=document.getElementById("animation-controls"),this.filename=document.getElementById("file-name"),this.title=document.getElementById("title"),this.configurationsPanel=document.getElementById("panel-configurations"),this.fileInput=document.getElementById("file-input"),this.fileInput2=document.getElementById("file-input"),this.dataset=o.createDataSet(),this.exporter=new x,this.dataset=t,this.renderer=e,this.canvas=document.getElementById("canvas"+s),this.canvasView=new A,this.animationControlsView=i,this.renderer=new S(this.canvasView.content,"2d"),this.styler=n,console.log(this.canvasView.content),this.fitter=new I(this.dataset,this.renderer),this.datagrid=new L(this.fitter),this.canvasname=s,this.animation=new T(this.dataset,this.fitter,this.styler,this.canvasname,r),this.animator=new D(this.dataset,this.animationControlsView,this.animation,this.renderer)}}class B{constructor(){this.options=document.getElementById("container-options"),this.configurations=document.getElementById("container-configurations"),this.controls=document.getElementById("animation-controls"),this.filename=document.getElementById("file-name"),this.canvas=document.getElementById("animation-canvas"),this.title=document.getElementById("title"),this.configurationsPanel=document.getElementById("panel-configurations"),this.animationControlsView=new y,this.fileInput=document.getElementById("file-input"),this.fileInput2=document.getElementById("file-input"),this.dataset=o.createDataSet(),this.dataset2=o.createDataSet(),this.loader=new w,this.loader2=new w,this.exporter=new x,this.races=Array(),this.canvasviews=[],this.styler=new d(this.dataset,this.configurations,this.races),this.newcanvas=new M(this.dataset,this.renderer,this.animationControlsView,this.styler,0,this.races),this.newcanvas2=new M(this.dataset,this.renderer,this.animationControlsView,this.styler,1,this.races),this.renderer=this.newcanvas.renderer,this.fitter=this.newcanvas.fitter,this.canvasviews.push(this.newcanvas),this.canvasviews.push(this.newcanvas2),this.animator=this.newcanvas.animator,this.animation=this.newcanvas.animation,this.animation2=this.newcanvas2.animation,this.styler=this.newcanvas.styler,this.datagrid=this.newcanvas.datagrid}start(){this.setupFileInput(),this.setupOptions(),this.setupControls(),this.setupCanvas(),this.setupFileInput2()}setupCanvas(){for(var t of this.canvasviews)window.addEventListener("resize",(()=>t.renderer.render())),t.canvas.appendChild(t.canvasView.content),t.renderer.enqueue(t.datagrid,-2),window.dispatchEvent(new Event("resize")),t.fitter.interaction.active=!0}setupControls(){this.controls.appendChild(this.animationControlsView.content)}setupFileInput(){this.fileInput.addEventListener("change",(()=>{const t=this.fileInput.files;this.tasks=t.length,this.loader.load2(undefined,t,(t=>{this.animator.fps=1,this.dataset.timeDate=this.loader.getTimeType(),this.dataset.data=t,--this.tasks})),this.fitter.interaction.reset()}))}updatedataset(){this.animation.update}setupFileInput2(){this.fileInput2.addEventListener("change",(()=>{this.updatedataset}))}setupOptions(){const t=new u,e=new p("File"),i=new m("import");i.add(new f("add File",(()=>{this.fileInput.click()}))),e.add(i),e.add(new f("Export",(()=>{this.exporter.exportToCsv("output.csv",this.dataset.data)})));const n=new p("Edit");new m("Snap"),n.add(new f("snap",(()=>{this.dataset.apply(new E)})));const s=new m("Interpolate");s.add(new f("Very low (one frame per hour)",(()=>{this.changefps(1/3600),this.dataset.apply(new g(1/3600))})),new f("Low (one frame per minute)",(()=>{this.changefps(1/60),this.dataset.apply(new g(1/60))})),new f("Medium (one frame per second)",(()=>{this.changefps(1),this.dataset.apply(new g(1))})),new f("High (60 frames per second)",(()=>{this.changefps(60),this.dataset.apply(new g(60))})),new f("Very high (120 frames per second)",(()=>{this.changefps(120),this.dataset.apply(new g(120))}))),n.add(s);const r=new p("View");r.add(new f("Configurations",(()=>{"none"==this.configurationsPanel.style.display?this.configurationsPanel.style.display="":this.configurationsPanel.style.display="none",window.dispatchEvent(new Event("resize"))})),new f("Reset canvas view",(()=>{this.fitter.interaction.reset(),this.renderer.render()})),new f("Toggle grid",(()=>{try{this.renderer.dequeue(this.datagrid)}catch(t){this.renderer.enqueue(this.datagrid,-2)}this.renderer.render()})));const a=new p("Addons");a.add(new f("Add picture",(()=>{new b;const t=new Image;t.onload=()=>this.renderer.render(),t.src=k,this.renderer.enqueue(new C(t,this.fitter,0,50,50,0),-1)})));const o=new p("Help");o.add(new f("Wiki",(()=>{window.open("https://github.ugent.be/cartogis/spc_tool/wiki")}))),t.add(e,n,r,a,o),this.options.appendChild(t.content)}changefps(t){for(var e of this.canvasviews)e.animator.fps=t}}const N=new B;new B,N.start()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,